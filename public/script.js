// =============== MINIHRY ===============
function openMiniGame() {
    document.getElementById('minigame-modal').style.display = "block";
    const btn = document.getElementById('gameBtn');
    const scoreP = document.getElementById('gameScore');
    let score = 0, started = false;
    btn.textContent = "Start";
    scoreP.textContent = "";

    btn.onclick = function () {
        if (!started) {
            started = true;
            score = 0;
            btn.textContent = "Klikni!";
            scoreP.textContent = "Body: 0";
            let left = 5;
            btn.disabled = false;
            let interval = setInterval(() => {
                left--;
                if (left <= 0) {
                    btn.textContent = "Konec";
                    btn.disabled = true;
                    scoreP.textContent = "Tv≈Øj v√Ωsledek: " + score;
                    clearInterval(interval);
                }
            }, 1000);
            btn.onclick = function () {
                if (!btn.disabled) {
                    score++;
                    scoreP.textContent = "Body: " + score;
                }
            };
        }
    }
}
function closeMiniGame() {
    document.getElementById('minigame-modal').style.display = "none";
}

// --- Klikac√≠ ≈°√≠lenstv√≠ ---
let crazyGameTimer = null;
let crazyGameTime = 7;
let crazyClicks = 0;

function openCrazyClickGame() {
  document.getElementById('crazyClickGame-modal').style.display = 'block';
  document.getElementById('crazyStartBtn').style.display = '';
  document.getElementById('crazyClickBtn').style.display = 'none';
  document.getElementById('crazyScore').textContent = '';
  document.getElementById('crazyTimer').textContent = '';
  renderCrazyLeaderboard();
}
function closeCrazyClickGame() {
  document.getElementById('crazyClickGame-modal').style.display = 'none';
  if (crazyGameTimer) clearInterval(crazyGameTimer);
}
document.getElementById('crazyStartBtn').onclick = function() {
  crazyClicks = 0;
  let timeLeft = crazyGameTime;
  document.getElementById('crazyScore').textContent = '';
  document.getElementById('crazyStartBtn').style.display = 'none';
  document.getElementById('crazyClickBtn').style.display = '';
  document.getElementById('crazyTimer').textContent = `‚è∞ Zb√Ωv√°: ${timeLeft}s`;
  crazyGameTimer = setInterval(function() {
    timeLeft--;
    document.getElementById('crazyTimer').textContent = `‚è∞ Zb√Ωv√°: ${timeLeft}s`;
    if (timeLeft <= 0) {
      clearInterval(crazyGameTimer);
      endCrazyGame();
    }
  }, 1000);
};
document.getElementById('crazyClickBtn').onclick = function() {
  crazyClicks++;
  document.getElementById('crazyScore').textContent = `Sk√≥re: ${crazyClicks}`;
};
function endCrazyGame() {
  document.getElementById('crazyClickBtn').style.display = 'none';
  document.getElementById('crazyScore').textContent = `V√Ωsledek: ${crazyClicks} klik≈Ø!`;
  checkCrazyRecord(crazyClicks);
  document.getElementById('crazyStartBtn').style.display = '';
  document.getElementById('crazyTimer').textContent = '';
  renderCrazyLeaderboard();
}
function getCrazyLeaderboard() {
  return JSON.parse(localStorage.getItem('crazyLeaderboard') || '[]');
}
function setCrazyLeaderboard(lb) {
  localStorage.setItem('crazyLeaderboard', JSON.stringify(lb));
}
function renderCrazyLeaderboard() {
  const lb = getCrazyLeaderboard();
  const ol = document.getElementById('crazyLeaderboard');
  ol.innerHTML = '';
  lb.forEach(({name, score}) => {
    let emoji = score >= 50 ? 'üî•' : score >= 30 ? 'üí™' : '';
    ol.innerHTML += `<li>${name}: <b>${score}</b> klik≈Ø ${emoji}</li>`;
  });
  if (lb.length === 0) ol.innerHTML = '<li>Zat√≠m nikdo nezaps√°n!</li>';
}
function checkCrazyRecord(newScore) {
  let lb = getCrazyLeaderboard();
  let min = lb[lb.length - 1]?.score || 0;
  if (lb.length < 5 || newScore > min) {
    let name = prompt('Nov√Ω rekord! Zadej svou p≈ôezd√≠vku:','Anonym');
    if (!name) name = 'Anonym';
    lb.push({name, score: newScore});
    lb = lb.sort((a,b) => b.score - a.score).slice(0,5);
    setCrazyLeaderboard(lb);
    alert('Gratuluji, jsi v TOP 5!');
  }
}



// =============== HEADER SCROLL ===============
let lastScrollTop = window.pageYOffset || document.documentElement.scrollTop;
const header = document.getElementById('main-header');
let currentState = "full";

window.addEventListener('scroll', () => {
  const currentScroll = window.pageYOffset || document.documentElement.scrollTop;
  const delta = currentScroll - lastScrollTop;

  if (Math.abs(delta) < 10) return;

  // 1. √öplnƒõ naho≈ôe ‚Üí zobraz cel√© (logo + jm√©no + nav)
  if (currentScroll <= 10 && currentState !== "full") {
    header.classList.remove('shrink', 'show-nav-only');
    currentState = "full";
  }

else if (delta > 0 && currentScroll > 50 && currentState !== "hidden") {
  // Okam≈æitƒõ skryj logo/jm√©no p≈ôed p≈ôid√°n√≠m shrink
  header.classList.remove('show-nav-only');
  header.classList.add('hiding'); // nov√° pomocn√° t≈ô√≠da

  void header.offsetHeight; // force reflow ‚Äì zajist√≠ p≈ôepnut√≠ mezi t≈ô√≠dami

  header.classList.add('shrink');
  currentState = "hidden";

  // Volitelnƒõ: po animaci hiding t≈ô√≠du odstran√≠me
  setTimeout(() => {
    header.classList.remove('hiding');
  }, 500); // mus√≠ odpov√≠dat d√©lce p≈ôechodu v CSS
}


  // 3. Scroll nahoru (ale nejsi √∫plnƒõ naho≈ôe) ‚Üí zobraz jen navigaci
  else if (delta < 0 && currentScroll > 10 && currentState !== "nav-only") {
    header.classList.remove('shrink');
    header.classList.add('show-nav-only');
    currentState = "nav-only";
  }

  lastScrollTop = currentScroll <= 0 ? 0 : currentScroll;
});


// =============== AI PANEL A ZVUK ===============
function shakeAiPanel() {
  const panel = document.querySelector('.ai-panel');
  if (!panel) return;
  panel.classList.remove('shake');
  void panel.offsetWidth;
  panel.classList.add('shake');
}
const zvuk = new Audio('pop.mp3');
function prehrajZvukJednou() {
  zvuk.play();
  window.removeEventListener('click', prehrajZvukJednou);
  window.removeEventListener('touchstart', prehrajZvukJednou);
}
window.addEventListener('click', prehrajZvukJednou);
window.addEventListener('touchstart', prehrajZvukJednou);

function showBotOnFirstInteraction(e) {
  document.getElementById('ai-assistant').classList.remove('ai-assistant-hidden');
  const audio = document.getElementById('shake-sound');
  if (audio) {
    audio.pause();
    audio.currentTime = 0;
    audio.play().catch(() => {});
  }
  shakeAiPanel();
  document.body.removeEventListener('click', showBotOnFirstInteraction);
  document.body.removeEventListener('touchstart', showBotOnFirstInteraction);
}
document.body.addEventListener('click', showBotOnFirstInteraction);
document.body.addEventListener('touchstart', showBotOnFirstInteraction);

// =============== AI CHAT, PANEL, THEME ===============
let aiWelcomeShown = false;
let meetingFlow = { active: false, step: 0, data: {} };

// ZAV≈ò√çT A OTEV≈ò√çT PANEL
document.getElementById('ai-close').onclick = function(e) {
  e.stopPropagation();
  document.getElementById('ai-assistant').classList.add('ai-assistant-hidden');
  document.getElementById('ai-open-btn').style.display = "flex";
  document.getElementById('ai-panel').classList.remove('ai-expanded');
  document.getElementById('ai-chat').style.display = "none";
};
document.getElementById('ai-open-btn').onclick = function() {
  document.getElementById('ai-assistant').classList.remove('ai-assistant-hidden');
  document.getElementById('ai-open-btn').style.display = "none";
};

document.getElementById('ai-panel').addEventListener('click', function(e){
  if(e.target.id === "ai-close") return;
  this.classList.add('ai-expanded');
  document.getElementById('ai-chat').style.display = "flex";
  document.getElementById('ai-chat-input').focus();
  // --- √öVODN√ç ZPR√ÅVA ---
  if (!aiWelcomeShown) {
    appendAiMsg("üëã V√≠tejte!<br>Skrze mƒõ si m≈Ø≈æete snadno domluvit sch≈Øzku, zjistit v√≠ce informac√≠ o mnƒõ, nebo z√≠skat ≈æivotopis. Napi≈°te mi, s ƒç√≠m mohu pomoci!");
    aiWelcomeShown = true;
  }
});

// =============== CHATBOT FORM ===============
document.getElementById('ai-chat-form').onsubmit = async function(e){
  e.preventDefault();
  const input = document.getElementById('ai-chat-input');
  const msg = input.value.trim();
  if(!msg) return;
  input.value = "";

  // --- Odpovƒõƒè na CV ---
  if (/cv|≈æivotopis|curriculum/i.test(msg)) {
    appendUserMsg(msg);
    appendAiMsg(`Samoz≈ôejmƒõ! Zde si m≈Ø≈æete st√°hnout m≈Øj ≈æivotopis:<br>
      <a href="Jarabek_CV.pdf" download target="_blank" style="color:#1976d2;font-weight:bold;">St√°hnout ≈æivotopis (PDF)</a>
      <br><small>Otev≈ôe se v nov√© z√°lo≈æce, p≈ô√≠padnƒõ se st√°hne do va≈°eho poƒç√≠taƒçe.</small>`);
    return;
  }

  // --- DOMLOUV√ÅN√ç SCH≈ÆZKY ---
  if (meetingFlow.active || /sch≈Øzku|schuzku|pohovor|setk√°n√≠|domluvit/i.test(msg)) {
    appendUserMsg(msg);
    handleMeetingFlow(msg);
    return;
  }

  // --- Bublina u≈æivatele ---
  appendUserMsg(msg);

  // --- Loader zpr√°va od bota ---
  const history = document.getElementById('ai-chat-history');
  const aiMsg = document.createElement('div');
  aiMsg.className = "ai-chat-msg ai";
  const loaderTexts = [
    "Odpov√≠d√°m", "Vyb√≠r√°m ta spr√°vn√° slova", "Chvilka napƒõt√≠", "Mozkov√© z√°vity v pohybu"
  ];
  const randomText = loaderTexts[Math.floor(Math.random() * loaderTexts.length)];
  aiMsg.innerHTML = `
    <img src="Profilovka.jpg" alt="AI Avatar" class="ai-message-avatar" />
    <span class="loader-dots">
      <span class="loader-text">${randomText}</span>
      <span class="dot">.</span>
      <span class="dot">.</span>
      <span class="dot">.</span>
    </span>
  `;
  history.appendChild(aiMsg);
  history.scrollTop = history.scrollHeight;
  saveChatHistoryArray();

  try {
    const response = await fetch('https://moj-chatbot.onrender.com/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [
          {
            role: "system",
            content: `Nejƒçastƒõj≈°√≠ ot√°zky a odpovƒõdi na pohovoru (Junior JavaScript Developer):
P≈ôedstav se n√°m. Proƒç chce≈° b√Ωt program√°tor?
Jmenuji se Dominik Jar√°bek, je mi 31 let a bav√≠ mƒõ technologie. Dlouho jsem pracoval v jin√Ωch oborech, ale programov√°n√≠ mƒõ v≈ædy l√°kalo, proto≈æe r√°d tvo≈ô√≠m a ≈ôe≈°√≠m probl√©my. M√°m za sebou nƒõkolik vlastn√≠ch projekt≈Ø v JavaScriptu a vƒõ≈ô√≠m, ≈æe v IT najdu uplatnƒõn√≠, kter√© mƒõ bude napl≈àovat a d√°l rozv√≠jet.
Jsem Dominik Jar√°bek, je mi 31 let. Bydl√≠m v Lipov√© u ≈†luknova. V souƒçasnosti studuji Speci√°ln√≠ pedagogiku na Univerzitƒõ J. E. Purkynƒõ v √öst√≠ nad Labem (od roku 2024). Maturitu m√°m z oboru Informaƒçn√≠ a komunikaƒçn√≠ technologie na VO≈† a S≈† ve Varnsdorfu. Od roku 2022 pracuji jako uƒçitel nƒõmeck√©ho jazyka na St≈ôedn√≠ lesnick√© ≈°kole ve ≈†luknovƒõ. P≈ôedt√≠m jsem byl nƒõkolik let se≈ôizovaƒçem a vedouc√≠m smƒõny ve firmƒõ Pulp-Tec GmbH v Nƒõmecku, kde jsem mƒõl pod sebou t√Ωm osmi lid√≠. Kr√°tce jsem tak√© pracoval jako dƒõln√≠k v Oppacher Mineralquellen v Nƒõmecku a v BeA CS v Lobendavƒõ, kde jsem vyu≈æ√≠val MS Excel. M√°m zku≈°enost i jako instruktor dƒõtsk√© sportovn√≠ p≈ô√≠pravky a vedouc√≠ na letn√≠ch t√°borech. Co se t√Ωƒçe IT dovednost√≠, jsem expert na Microsoft Office, pokroƒçile ovl√°d√°m Adobe Photoshop, Lightroom a Illustrator, stejnƒõ tak AutoCAD. Um√≠m z√°klady webov√©ho v√Ωvoje (HTML, CSS, JavaScript). Mezi m√© siln√© str√°nky pat≈ô√≠ uƒçenlivost, samostatnost, t√Ωmov√° pr√°ce, ≈ôe≈°en√≠ konflikt≈Ø a flexibilita. M√°m nƒõkolik certifik√°t≈Ø, nap≈ô√≠klad Mezin√°rodn√≠ cenu v√©vody z Edinburghu, ≈°kolen√≠ Nevypus≈• du≈°i (du≈°evn√≠ zdravovƒõda pro uƒçitele), spr√°vu TikTok a z√°klady umƒõl√© inteligence. Mluv√≠m plynule nƒõmecky (√∫rove≈à B2, certifik√°t Goethe Institut), anglicky na √∫rovni zaƒç√°teƒçn√≠ka. Mezi m√© z√°jmy pat≈ô√≠ sport, tvorba webov√Ωch str√°nek a grafiky, ƒçetba, osobn√≠ rozvoj a cestov√°n√≠. narodil jsem se 30.5.1994. m≈Øj p≈ôedstavovan√Ω plat je 50-60 000 Kƒç. Jsem ochotn√Ω se p≈ôestƒõhovat kamkoli, pokud to bude pot≈ôeba. Preferuji p≈ôestƒõhov√°n√≠ za prac√≠, ale kdy≈æ bude mo≈ænost pracovat z domu a obƒças do firmy dojet, budu tak√© spokojen.
V JavaScriptuu se teprve uƒç√≠m, ale dok√°≈æu si v≈ædy poradit. Odpov√≠d√°m v≈ædy za sebe v prvn√≠ osobƒõ, ne jako AI, ale jako ƒçlovƒõk Dominik. na otazku "kdo jsi", odpov√≠m - "Dominik Jar√°bek". Pokud dostanu ot√°zku na zku≈°enosti, znalosti nebo dovednosti, odpov√≠d√°m osobnƒõ na z√°kladƒõ v√Ω≈°e uveden√Ωch informac√≠. Odpov√≠d√°m struƒçnƒõ, lidsky a ƒçesky.

Proƒç JavaScript?
JavaScript mƒõ zaujal t√≠m, ≈æe je v≈°estrann√Ω ‚Äì mohu s n√≠m tvo≈ôit weby, aplikace i backend. Je to nejpou≈æ√≠vanƒõj≈°√≠ jazyk na webu, m√° velkou komunitu a spoustu n√°stroj≈Ø. L√≠b√≠ se mi, ≈æe mohu rychle vidƒõt v√Ωsledky sv√© pr√°ce.

Na ƒçem jsi naposledy pracoval?
M≈Øj posledn√≠ projekt byla osobn√≠ str√°nka s interaktivn√≠m chatbotem, kterou jsem tvo≈ôil v JavaScriptu, HTML a CSS. Vyzkou≈°el jsem si komunikaci s API a pr√°ci s DOM. D√≠ky tomu jsem se nauƒçil l√©pe pracovat s asynchronn√≠mi operacemi a roz≈°√≠≈ôil jsem si znalosti o tom, jak funguje web.

Jak se uƒç√≠≈° nov√© technologie?
Nejradƒõji se uƒç√≠m na konkr√©tn√≠ch projektech. Pou≈æ√≠v√°m online kurzy, YouTube, ofici√°ln√≠ dokumentaci, Stack Overflow. Kdy≈æ naraz√≠m na probl√©m, zkou≈°√≠m ho nejprve vy≈ôe≈°it s√°m, a kdy≈æ to nejde, hled√°m ≈ôe≈°en√≠ na f√≥rech nebo se pt√°m zku≈°enƒõj≈°√≠ch.

Jak√Ω je rozd√≠l mezi let, const a var?
let a const maj√≠ blokov√Ω scope, kde≈æto var je funkƒçn√≠ (function scope). const nav√≠c nejde p≈ôepsat (hodnotu nelze zmƒõnit), ale pokud je to objekt, tak jeho vlastnosti mƒõnit m≈Ø≈æu.

Co je to hoisting?
Hoisting znamen√°, ≈æe deklarace promƒõnn√Ωch a funkc√≠ se ‚Äûzvednou‚Äú na zaƒç√°tek jejich scope. U var se promƒõnn√° vytvo≈ô√≠, ale nen√≠ inicializovan√° (m√° hodnotu undefined). Funkce deklarovan√© pomoc√≠ function lze volat i p≈ôed jejich definic√≠.

Vysvƒõtli rozd√≠l mezi == a ===.
== porovn√°v√° hodnoty s p≈ôevodem typu (nap≈ô√≠klad "1" == 1 je true). === porovn√°v√° hodnotu i typ (tedy "1" === 1 je false).

Co je closure?
Closure je funkce, kter√° si ‚Äûpamatuje‚Äú promƒõnn√© ze scope, ve kter√©m byla vytvo≈ôena, i kdy≈æ se pozdƒõji spust√≠ jinde. D√≠ky tomu m≈Ø≈æu nap≈ô√≠klad vytv√°≈ôet soukrom√© promƒõnn√© nebo funkce s vnit≈ôn√≠m stavem.
P≈ô√≠klad:

function counter() {
  let count = 0;
  return function() {
    count++;
    return count;
  }
}
let c = counter();
c(); // 1
c(); // 2
Co je to callback funkce?
Je to funkce p≈ôedan√° jin√© funkci jako argument, kter√° je zavol√°na a≈æ po dokonƒçen√≠ urƒçit√© akce.

function greeting(name, callback) {
  callback(Ahoj, ${name}!);
}
greeting("Dominik", console.log);
K ƒçemu slou≈æ√≠ this?
this odkazuje na objekt, ke kter√©mu aktu√°lnƒõ pat≈ô√≠me ‚Äì z√°le≈æ√≠ na tom, jak je funkce volan√° (objekt, t≈ô√≠da, window atd.). U arrow funkc√≠ se hodnota this nep≈ôepisuje a z≈Øst√°v√° z okol√≠.

Jak√Ω je rozd√≠l mezi arrow function a bƒõ≈ænou funkc√≠?
Arrow funkce maj√≠ krat≈°√≠ z√°pis, ale hlavnƒõ nemaj√≠ vlastn√≠ this, arguments ani super. Jsou vhodn√© pro kr√°tk√© funkce nebo jako callbacky.
P≈ô√≠klad:

const plus = (a, b) => a + b;
Vysvƒõtli rozd√≠l mezi null a undefined.
undefined znamen√°, ≈æe promƒõnn√° nebyla inicializovan√°, nebo funkce nic nevrac√≠. null znamen√°, ≈æe promƒõnn√° m√° z√°mƒõrnƒõ pr√°zdnou hodnotu.

Co je event loop?
Event loop je mechanismus v JavaScriptu, kter√Ω umo≈æ≈àuje spou≈°tƒõt asynchronn√≠ k√≥d (nap≈ô. timeouty, Promise). D√≠ky tomu m≈Ø≈æe JS reagovat na ud√°losti a souƒçasnƒõ nezablokovat hlavn√≠ vl√°kno.

Jak funguj√≠ Promise?
Promise reprezentuje hodnotu, kter√° m≈Ø≈æe b√Ωt dostupn√° teƒè, pozdƒõji, nebo nikdy. M√° t≈ôi stavy: pending, fulfilled, rejected.

let p = new Promise((resolve, reject) => {
  setTimeout(() => resolve("Hotovo!"), 1000);
});
p.then(console.log);
Rozd√≠l mezi synchronn√≠m a asynchronn√≠m k√≥dem?
Synchronn√≠ k√≥d se vykon√°v√° ≈ô√°dek po ≈ô√°dku, asynchronn√≠ m≈Ø≈æe ‚Äûƒçekat‚Äú na v√Ωsledek, mezit√≠m se dƒõl√° nƒõco jin√©ho (nap≈ô. naƒç√≠t√°n√≠ dat z internetu).

Jak naƒçte≈° data z API v JavaScriptu?
Nejƒçastƒõji pomoc√≠ fetch:

fetch('https://api.example.com/data')
  .then(res => res.json())
  .then(data => console.log(data));
Nebo pomoc√≠ knihovny axios.

Co je destrukturalizace?
Rychl√Ω zp≈Øsob, jak ‚Äûrozbalit‚Äú hodnoty z pole nebo objektu do promƒõnn√Ωch.

const user = {name: "Dominik", age: 31};
const {name, age} = user; // name = "Dominik", age = 31
Co je DOM?
DOM je Document Object Model ‚Äì stromov√° struktura HTML str√°nky, kterou m≈Ø≈æeme mƒõnit pomoc√≠ JavaScriptu.

Jak zmƒõn√≠≈° obsah elementu p≈ôes JS?
Nap≈ô√≠klad:

document.getElementById('id').textContent = "Nov√Ω text";
Co udƒõl√°≈°, kdy≈æ si nev√≠≈° rady s √∫kolem?
Nejd≈ô√≠v zkus√≠m probl√©m rozdƒõlit na men≈°√≠ ƒç√°sti. Pokud si st√°le nev√≠m rady, hled√°m na internetu nebo se zept√°m koleg≈Ø. Jsem zvykl√Ω rychle se uƒçit nov√© vƒõci.

Jak√Ω je tv≈Øj nejvƒõt≈°√≠ √∫spƒõch/projekt?
Moje osobn√≠ str√°nka s chatbotem, kde jsem si poprv√© zkusil kompletn√≠ web ‚Äì od n√°vrhu a≈æ po napojen√≠ na OpenAI API.

Jak bys popsal sv≈Øj styl pr√°ce v t√Ωmu?
Jsem komunikativn√≠, nem√°m probl√©m se zeptat nebo poradit. Respektuji domluvy a r√°d p≈ôisp√≠v√°m n√°pady, ale um√≠m i naslouchat ostatn√≠m.

Jak si p≈ôedstavuje≈° ide√°ln√≠ pracovn√≠ prost≈ôed√≠?
Preferuji prost≈ôed√≠, kde je otev≈ôen√° komunikace, kde se kolegov√© vz√°jemnƒõ podporuj√≠ a je prostor pro uƒçen√≠ a rozvoj.

Jak√© m√°≈° oƒçek√°v√°n√≠ ohlednƒõ mzdy?
R√°d bych mƒõl n√°stupn√≠ mzdu odpov√≠daj√≠c√≠ juniorn√≠ pozici, tedy podle lokality a typu firmy. ƒåasto se pohybuje okolo XY tis√≠c Kƒç hrub√©ho, ale z√°le≈æ√≠ mi hlavnƒõ na mo≈ænostech r≈Østu a rozvoje v t√Ωmu.

Jak√© benefity jsou pro tebe d≈Øle≈æit√©?
Mo≈ænost pr√°ce z domova, podpora vzdƒõl√°v√°n√≠, p≈ô√≠spƒõvky na stravov√°n√≠ nebo multisport, p≈ô√°telsk√© prost≈ôed√≠ a otev≈ôen√° komunikace.

Kdy m≈Ø≈æe≈° nastoupit?
M≈Ø≈æu nastoupit prakticky ihned / podle dohody (uprav podle situace).

M√°≈° nƒõjak√© ot√°zky na n√°s?
Doporuƒçen√© ot√°zky:

Jak vypad√° typick√Ω den v t√Ωmu?

Na jak√Ωch projektech bych mohl pracovat?

Jak vypad√° za≈°kolen√≠/junior support ve va≈°em t√Ωmu?

Jak vypad√° proces code review a pr√°ce s Gitem?

Jak ƒçasto je prostor pro dal≈°√≠ vzdƒõl√°v√°n√≠?
                  `
          },
          {
            role: "user",
            content: msg
          }
        ]
      })
    });
    if (!response.ok) {
      aiMsg.innerHTML = `
        <img src="Profilovka.jpg" alt="AI Avatar" class="ai-message-avatar" />
        <span>Omlouv√°m se, nƒõco se pokazilo na serveru üòï</span>
      `;
    } else {
      const data = await response.json();
      let odpoved = "Odpovƒõƒè nebyla nalezena.";
      if (data.reply) {
        odpoved = data.reply;
      } else if (data.choices && data.choices[0] && data.choices[0].message && data.choices[0].message.content) {
        odpoved = data.choices[0].message.content;
      }
      aiMsg.remove();
      appendAiMsg(odpoved);
    }
  } catch (error) {
    aiMsg.remove();
    appendAiMsg("Nepoda≈ôilo se spojit se serverem. Zkontroluj, ≈æe m√°≈° spu≈°tƒõn√Ω backend (openai-proxy.js).");
  }
  history.scrollTop = history.scrollHeight;
  saveChatHistoryArray();
};

// =============== MEETING FLOW FUNKCE ===============
async function handleMeetingFlow(msg) {
  // Konec flow na "konec"
  if (msg.trim().toLowerCase() === "konec") {
    appendAiMsg("Sch≈Øzka zru≈°ena. Kdykoliv napi≈°te 'sch≈Øzku', a zaƒçneme znovu.");
    meetingFlow.active = false; meetingFlow.step = 0; meetingFlow.data = {};
    return;
  }
  if (!meetingFlow.active) {
    meetingFlow.active = true; meetingFlow.step = 0; meetingFlow.data = {};
    appendAiMsg("Skvƒõle! R√°d domluv√≠m sch≈Øzku. Jak se jmenujete?");
    return;
  }
  if (meetingFlow.step === 0) {
    meetingFlow.data.name = msg;
    appendAiMsg("Dƒõkuji! Jak√Ω je v√°≈° e-mail?");
    meetingFlow.step = 1;
    return;
  }
  if (meetingFlow.step === 1) {
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(msg)) {
      appendAiMsg("Zadejte pros√≠m platn√Ω e-mail:");
      return;
    }
    meetingFlow.data.email = msg;
    appendAiMsg("Kdy by v√°m sch≈Øzka vyhovovala? (napi≈°te datum a ƒças, nap≈ô. 18.7. 10:30)");
    meetingFlow.step = 2;
    return;
  }
  if (meetingFlow.step === 2) {
    meetingFlow.data.datetime = msg;
    appendAiMsg("Chcete nƒõco vzk√°zat? (nebo napi≈°te jen '-')");
    meetingFlow.step = 3;
    return;
  }
  if (meetingFlow.step === 3) {
    meetingFlow.data.message = msg;
    appendAiMsg("Odes√≠l√°m ≈æ√°dost...");
    try {
      const res = await fetch('https://moj-chatbot.onrender.com/api/meeting', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(meetingFlow.data)
      });
      const result = await res.json();
      if (result.success) {
        appendAiMsg("Sch≈Øzka byla √∫spƒõ≈°nƒõ domluvena! Brzy v√°m p≈ôijde potvrzen√≠ na e-mail. D√≠ky üôÇ");
      } else {
        appendAiMsg("Nƒõco se pokazilo p≈ôi odesl√°n√≠: " + (result.error || ""));
      }
    } catch (err) {
      appendAiMsg("Chyba spojen√≠: " + err.toString());
    }
    meetingFlow.active = false;
    meetingFlow.step = 0;
    meetingFlow.data = {};
    return;
  }
}
function speakMsg(text) {
  // Odstran√≠ HTML tagy, p≈ôeƒçte ƒçesky, zru≈°√≠ star√© mluven√≠
  const plainText = text.replace(/<[^>]+>/g, '');
  if (window.speechSynthesis.speaking) window.speechSynthesis.cancel();
  const utter = new SpeechSynthesisUtterance(plainText);
  utter.lang = 'cs-CZ';
  utter.rate = 1.05;
  const voices = speechSynthesis.getVoices().filter(v => v.lang.startsWith('cs'));
  if (voices.length > 0) utter.voice = voices[0];
  window.speechSynthesis.speak(utter);
}

// =============== HISTORIE CHATABOTA (u≈æivatel + bot) ===============
function appendAiMsg(text, save = true) {
  const history = document.getElementById('ai-chat-history');
  const aiMsg = document.createElement('div');
  aiMsg.className = "ai-chat-msg ai";
  aiMsg.innerHTML = `
    <img src="Profilovka.jpg" alt="AI Avatar" class="ai-message-avatar" />
    <span>${text}</span>
   <button class="speak-btn" title="P≈ôehr√°t zpr√°vu">
  <svg width="22" height="22" viewBox="0 0 20 20" class="icon-speaker" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M3 8.5V11.5C3 12.0523 3.44772 12.5 4 12.5H7L11 16V4L7 7.5H4C3.44772 7.5 3 7.94772 3 8.5Z" stroke="#1976d2" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M14 8C14.5523 8.66667 14.5523 11.3333 14 12" stroke="#1976d2" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M16 6C17.3333 7.66667 17.3333 12.3333 16 14" stroke="#1976d2" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  </svg>
</button>
  `;
  history.appendChild(aiMsg);
  aiMsg.querySelector('.speak-btn').onclick = function(e) {
    e.stopPropagation();
    speakMsg(text);
  };
  history.scrollTop = history.scrollHeight;
  if (save !== false) saveChatHistoryArray();
}

function appendUserMsg(text, save = true) {
  const history = document.getElementById('ai-chat-history');
  const userMsg = document.createElement('div');
  userMsg.className = "ai-chat-msg user";
  userMsg.innerHTML = `
    <span>${text}</span>
 <button class="speak-btn" title="P≈ôehr√°t zpr√°vu">
  <svg width="22" height="22" viewBox="0 0 20 20" class="icon-speaker" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M3 8.5V11.5C3 12.0523 3.44772 12.5 4 12.5H7L11 16V4L7 7.5H4C3.44772 7.5 3 7.94772 3 8.5Z" stroke="#1976d2" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M14 8C14.5523 8.66667 14.5523 11.3333 14 12" stroke="#1976d2" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M16 6C17.3333 7.66667 17.3333 12.3333 16 14" stroke="#1976d2" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  </svg>
</button>
  `;
  history.appendChild(userMsg);
  userMsg.querySelector('.speak-btn').onclick = function(e) {
    e.stopPropagation();
    speakMsg(text);
  };
  history.scrollTop = history.scrollHeight;
  if (save !== false) saveChatHistoryArray();
}

function saveChatHistoryArray() {
  const messages = [];
  document.querySelectorAll('#ai-chat-history .ai-chat-msg').forEach(div => {
    let role = div.classList.contains('ai') ? 'ai' : 'user';
    let content = div.querySelector('span') ? div.querySelector('span').innerHTML : div.textContent;
    messages.push({ role, content });
  });
  localStorage.setItem('aiChatHistoryArr', JSON.stringify(messages));
}

function loadChatHistoryArray() {
  const saved = localStorage.getItem('aiChatHistoryArr');
  if (saved) {
    const messages = JSON.parse(saved);
    const history = document.getElementById('ai-chat-history');
    history.innerHTML = '';
    messages.forEach(msg => {
      if (msg.role === 'ai') {
        appendAiMsg(msg.content, false);
      } else {
        appendUserMsg(msg.content, false);
      }
    });
  }
}
function clearChatHistoryArray() {
  localStorage.removeItem('aiChatHistoryArr');
  document.getElementById('ai-chat-history').innerHTML = '';
}

// Naƒçti historii p≈ôi startu str√°nky
window.addEventListener('DOMContentLoaded', function() {
  loadChatHistoryArray();
});
// ====== DIKTOV√ÅN√ç ZPR√ÅVY P≈òES MIKROFON ======
// P≈ôed pou≈æit√≠m: ve formul√°≈ôi mus√≠ b√Ωt <button type="button" id="mic-btn">üé§</button> a input s id="ai-chat-input"

let recognizing = false;
let recognition;

if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  recognition = new SpeechRecognition();
  recognition.lang = 'cs-CZ'; // ƒçe≈°tina
  recognition.continuous = false;
  recognition.interimResults = false;

  const micBtn = document.getElementById('mic-btn');
  const micIco = document.getElementById('mic-ico');
  const input = document.getElementById('ai-chat-input');

  if (micBtn && input) {
    micBtn.onclick = function () {
      if (recognizing) {
        recognition.stop();
        return;
      }
      recognition.start();
    };

    recognition.onstart = function () {
      recognizing = true;
      if (micIco) micIco.textContent = 'üî¥'; // M≈Ø≈æe≈° si zmƒõnit na animaci/ikonu
      micBtn.classList.add('recording');
    };
    recognition.onend = function () {
      recognizing = false;
      if (micIco) micIco.textContent = 'üé§';
      micBtn.classList.remove('recording');
    };
    recognition.onresult = function (event) {
      const text = event.results[0][0].transcript;
      input.value = text;
      input.focus();
      document.getElementById('ai-chat-form').requestSubmit();
    };
    recognition.onerror = function (event) {
      recognizing = false;
      if (micIco) micIco.textContent = 'üé§';
      micBtn.classList.remove('recording');
      // M≈Ø≈æe≈° p≈ôidat notifikaci o chybƒõ
    };
  }
}


// =============== T√âMATICK√ù RE≈ΩIM ===============
function applyThemeToChat() {
  const chat = document.getElementById('ai-assistant');
  if (!chat) return;
  if(document.body.classList.contains('dark')){
    chat.classList.add('dark');
  } else {
    chat.classList.remove('dark');
  }
}
const themeToggle = document.getElementById('theme-toggle');
if(themeToggle){
  themeToggle.addEventListener('click', function() {
    document.body.classList.toggle('dark');
    localStorage.setItem('theme', document.body.classList.contains('dark') ? 'dark' : 'light');
    applyThemeToChat();
  });
  if(localStorage.getItem('theme') === 'dark') {
    document.body.classList.add('dark');
    setTimeout(applyThemeToChat, 1);
  }
}

const modal = document.getElementById('cvModal');
const cvEmbed = document.getElementById('cvEmbed');

document.getElementById('showCvBtn').addEventListener('click', function() {
    cvEmbed.src = 'Jarabek_CV.pdf';
    modal.style.display = 'flex';
});
document.getElementById('showCertBtn').addEventListener('click', function() {
    cvEmbed.src = 'dodatek_k_osvedceni.pdf';
    modal.style.display = 'flex';
});
document.getElementById('showEdinBtn').addEventListener('click', function() {
    cvEmbed.src = 'Mezin√°rodn√≠_cena_v√©dody_z_Edinburghu.pdf';
    modal.style.display = 'flex';
});
document.getElementById('showTiktokBtn').addEventListener('click', function() {
    cvEmbed.src = 'TikTok_certifik√°t.pdf';
    modal.style.display = 'flex';
});
document.getElementById('showNevypustBtn').addEventListener('click', function() {
    cvEmbed.src = 'Nevypust_dusi_dusevni_zdravoveda_pro_ucitele.pdf';
    modal.style.display = 'flex';
});

// Zav√≠r√°n√≠ modalu
document.getElementById('closeCvModal').addEventListener('click', function() {
    modal.style.display = 'none';
    cvEmbed.src = '';
});
window.addEventListener('click', function(event) {
    if (event.target === modal) {
        modal.style.display = 'none';
        cvEmbed.src = '';
    }
});
window.addEventListener('keydown', function(event) {
    if (event.key === 'Escape' && modal.style.display === 'flex') {
        modal.style.display = 'none';
        cvEmbed.src = '';
    }
});




const track = document.getElementById('carouselTrack');
const slides = Array.from(track.children);
const dotsContainer = document.getElementById('carouselDots');
const slideCount = slides.length;
let currentIdx = 0;
let interval;

// Vytvo≈ôen√≠ teƒçek
for (let i = 0; i < slideCount; i++) {
  const dot = document.createElement('div');
  dot.className = 'carousel-dot' + (i === 0 ? ' active' : '');
  dot.addEventListener('click', () => {
    goToSlide(i);
    resetInterval();
  });
  dotsContainer.appendChild(dot);
}

function goToSlide(idx) {
  track.style.transform = `translateX(-${idx * 100}%)`;
  dotsContainer.querySelectorAll('.carousel-dot').forEach((dot, i) => {
    dot.classList.toggle('active', i === idx);
  });
  currentIdx = idx;
}

function nextSlide() {
  let idx = (currentIdx + 1) % slideCount;
  goToSlide(idx);
}
function resetInterval() {
  clearInterval(interval);
  interval = setInterval(nextSlide, 3800);
}

// Dotykov√© ovl√°d√°n√≠ (voliteln√©)
let startX = 0;
track.addEventListener('touchstart', e => {
  startX = e.touches[0].clientX;
});
track.addEventListener('touchend', e => {
  let diff = e.changedTouches[0].clientX - startX;
  if (diff > 70) {
    // swipe right
    goToSlide((currentIdx - 1 + slideCount) % slideCount);
    resetInterval();
  } else if (diff < -70) {
    // swipe left
    nextSlide();
    resetInterval();
  }
});

interval = setInterval(nextSlide, 3800);

